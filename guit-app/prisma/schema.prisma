// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  transactions Transaction[]
  budgets    Budget[]
}

model Account {
  id        Int       @id @default(autoincrement())
  userId    Int
  name      String
  type      String
  balance   Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Category {
  id    Int       @id @default(autoincrement())
  name  String
  type  String
  transactions Transaction[]
  budgets    Budget[]
}

model Transaction {
  id          Int       @id @default(autoincrement())
  userId      Int
  accountId   Int
  categoryId  Int
  amount      Float
  type        String
  date        DateTime
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  account     Account   @relation(fields: [accountId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Budget {
  id          Int       @id @default(autoincrement())
  userId      Int
  categoryId  Int
  amount      Float
  period      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
}